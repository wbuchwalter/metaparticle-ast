// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// TfReplicaSpec tf replica spec
// swagger:model tfReplicaSpec
type TfReplicaSpec struct {

	// containers
	Containers []*Container `json:"containers"`

	// replica type
	// Enum: [MASTER WORKER PS]
	ReplicaType string `json:"replicaType,omitempty"`

	// replicas
	Replicas int32 `json:"replicas,omitempty"`

	// volumes
	Volumes []*Volume `json:"volumes"`
}

// Validate validates this tf replica spec
func (m *TfReplicaSpec) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateReplicaType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *TfReplicaSpec) validateContainers(formats strfmt.Registry) error {

	if swag.IsZero(m.Containers) { // not required
		return nil
	}

	for i := 0; i < len(m.Containers); i++ {
		if swag.IsZero(m.Containers[i]) { // not required
			continue
		}

		if m.Containers[i] != nil {
			if err := m.Containers[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("containers" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

var tfReplicaSpecTypeReplicaTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["MASTER","WORKER","PS"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		tfReplicaSpecTypeReplicaTypePropEnum = append(tfReplicaSpecTypeReplicaTypePropEnum, v)
	}
}

const (

	// TfReplicaSpecReplicaTypeMASTER captures enum value "MASTER"
	TfReplicaSpecReplicaTypeMASTER string = "MASTER"

	// TfReplicaSpecReplicaTypeWORKER captures enum value "WORKER"
	TfReplicaSpecReplicaTypeWORKER string = "WORKER"

	// TfReplicaSpecReplicaTypePS captures enum value "PS"
	TfReplicaSpecReplicaTypePS string = "PS"
)

// prop value enum
func (m *TfReplicaSpec) validateReplicaTypeEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, tfReplicaSpecTypeReplicaTypePropEnum); err != nil {
		return err
	}
	return nil
}

func (m *TfReplicaSpec) validateReplicaType(formats strfmt.Registry) error {

	if swag.IsZero(m.ReplicaType) { // not required
		return nil
	}

	// value enum
	if err := m.validateReplicaTypeEnum("replicaType", "body", m.ReplicaType); err != nil {
		return err
	}

	return nil
}

func (m *TfReplicaSpec) validateVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	for i := 0; i < len(m.Volumes); i++ {
		if swag.IsZero(m.Volumes[i]) { // not required
			continue
		}

		if m.Volumes[i] != nil {
			if err := m.Volumes[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("volumes" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *TfReplicaSpec) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *TfReplicaSpec) UnmarshalBinary(b []byte) error {
	var res TfReplicaSpec
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
